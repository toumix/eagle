The canonical microwave oven example from the Clarke, Grumberg and Peled book

>>> from ctl import *
>>> from checker import *
>>> g = PredicatedGraph()
>>> g.add_edge(1, 2)
>>> g.add_edge(1, 3)
>>> g.add_edge(2, 5)
>>> g.add_edge(3, 1)
>>> g.add_edge(3, 6)
>>> g.add_edge(4, 1)
>>> g.add_edge(4, 4)
>>> g.add_edge(4, 3)
>>> g.add_edge(5, 2)
>>> g.add_edge(5, 3)
>>> g.add_edge(6, 7)
>>> g.add_edge(7, 4)
>>> 
>>> g.add_predicate(1, CTL('!start'))
>>> g.add_predicate(1, CTL('!close'))
>>> g.add_predicate(1, CTL('!heat'))
>>> g.add_predicate(1, CTL('!error'))
>>> 
>>> g.add_predicate(2, CTL('start'))
>>> g.add_predicate(2, CTL('!close'))
>>> g.add_predicate(2, CTL('!heat'))
>>> g.add_predicate(2, CTL('error'))
>>> 
>>> g.add_predicate(3, CTL('!start'))
>>> g.add_predicate(3, CTL('close'))
>>> g.add_predicate(3, CTL('!heat'))
>>> g.add_predicate(3, CTL('!error'))
>>> 
>>> g.add_predicate(4, CTL('!start'))
>>> g.add_predicate(4, CTL('close'))
>>> g.add_predicate(4, CTL('heat'))
>>> g.add_predicate(4, CTL('!error'))
>>> 
>>> g.add_predicate(5, CTL('start'))
>>> g.add_predicate(5, CTL('close'))
>>> g.add_predicate(5, CTL('!heat'))
>>> g.add_predicate(5, CTL('error'))
>>> 
>>> g.add_predicate(6, CTL('start'))
>>> g.add_predicate(6, CTL('close'))
>>> g.add_predicate(6, CTL('!heat'))
>>> g.add_predicate(6, CTL('!error'))
>>> 
>>> g.add_predicate(7, CTL('start'))
>>> g.add_predicate(7, CTL('close'))
>>> g.add_predicate(7, CTL('heat'))
>>> g.add_predicate(7, CTL('!error'))
>>> 
>>> microwave = g
>>> microwave.check('start')
set([2, 5, 6, 7])
>>> microwave.check(CTL('!heat'))
set([1, 2, 3, 5, 6])

# the usual EG operator is "EG on infinite paths", so it is EGi in this framework
>>> microwave.check(CTL('EGi !heat'))
set([1, 2, 3, 5])
>>> microwave.check('and start (EGi !heat)')
set([2, 5])
>>> microwave.check('EF (and start (EGi !heat))')
set([1, 2, 3, 4, 5, 6, 7])
>>> microwave.check('!EF (and start (EGi !heat))')
set([])

################
# now testing the microwave with some reverse formulas

# 6 satisfies the formula because of the 1 <-> 3 path
>>> microwave.check(RevEGi('!heat'))
set([1, 2, 3, 5, 6])

>>> microwave.check('and start (<-EGi !heat)')
set([2, 5, 6])

# <-EF f = what are the nodes that have f somewhere in a possible past ?
#        = what are all the successors of nodes satisfying f ?
>>> microwave.check('<-EF (and start (<-EGi !heat))')
set([1, 2, 3, 4, 5, 6, 7])

# negation: what are the nodes unreachable from {2,5,6} ?
>>> microwave.check('!<-EF (and start (<-EGi !heat))')
set([])

