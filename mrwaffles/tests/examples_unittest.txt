>>> from checker import *

################################
# dead code elimination
# returns the list of nodes that define a variable x that is never used later (not used at all)
# only useful in SSA form

# and def(x) (AX !EF use(x))
# and def(x) AX AF !use(x)

>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(2,2)
>>> g.add_edge(2,3)
>>> g.add_edge(3,4)
>>> g.add_predicate(1, 'def(eax)')
>>> g.add_predicate(2, 'use(ebx)')
>>> g.add_predicate(4, 'use(memory)')
>>> g.add_predicate(5, 'use(eax)') # this is not connected
>>> 
>>> g.check('and def(eax) AX !EF use(eax)')
set([1])


################################
# dead code elimination, not SSA
# returns the list of nodes that define a variable x that is never used before being def'ed again

# and def(x) AX !EU !def(x) use(x)
# equivalent:
# and def(x) !EX EU !def(x) use(x)

# opposite: list of nodes that def a variable that is live (ie the definition reaches a use)
# and def(x) AX EU !def(x) use(x)
-> [3]

>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(2,2)
>>> g.add_edge(2,3)
>>> g.add_edge(3,4)
>>> g.add_predicate(1, 'def(eax)')
>>> g.add_predicate(2, 'use(ebx)')
>>> g.add_predicate(3, 'def(eax)')
>>> g.add_predicate(4, 'use(eax)')
>>> g.add_predicate(5, 'use(eax)') # still not connected
>>> 
>>> g.check('and def(eax) AX !EU !def(eax) use(eax)')
set([1])
>>> g.check_with_freevars('and def(x) AX !EU !def(x) use(x)')
set([1])


################################
# dead code elimination, not SSA, with free variables
# returns the list of nodes that define a variable x that is never used before being def'ed again

# and def(x) AX !EU !def(x) use(x)

>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(3,2) # 3 won't be reachable
>>> g.add_edge(2,4)
>>> g.add_edge(4,2) # a loop, for the fun
>>> g.add_edge(4,5)
>>> g.add_edge(5,6)
>>> g.add_edge(5,7) # a double branch, also for the fun
>>> g.add_edge(6,8)
>>> g.add_edge(7,8)
>>> 
>>> g.add_predicate(1, 'def(eax)')
>>> g.add_predicate(2, 'def(ebx)')
>>> g.add_predicate(3, 'use(ebx)') # this use is unreachable
>>> g.add_predicate(4, 'use(pouet)')
>>> g.add_predicate(5, 'def(eax)') # eax overwrite after the loop
>>> g.add_predicate(6, 'def(ebx)') # ebx overwrite in each branch
>>> g.add_predicate(7, 'def(ebx)') # ebx overwrite in each branch
>>> g.add_predicate(8, 'use(ebx)') # make the second defs live
>>> g.add_predicate(8, 'use(eax)') # make the second defs live
>>> 
>>> g.check_with_freevars('and def(x) AX !EU !def(x) use(x)')
set([1, 2])


################################
# constant propagation
# returns a list of nodes that define a constant variable that can be propagated (ie a definition that can reach an exclusive use, i.e. a use which is not also a def)
# pb: does not tell where the constant can be propagated

# and (and def(x) constant(x)) AX EU !def(x) (and !def(x) use(x))

>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(2,2)
>>> g.add_edge(2,3)
>>> g.add_edge(3,4)
>>> g.add_predicate(1, 'def(eax)')
>>> g.add_predicate(1, 'constant(eax)')
>>> g.add_predicate(2, 'use(ebx)')
>>> g.add_predicate(3, 'use(eax)') # here, eax can be replaced by the constant
>>> g.add_predicate(4, 'def(eax)')
>>> g.add_predicate(4, 'use(eax)')
>>> g.add_predicate(5, 'use(eax)') # this is a non-connected node with an exclusive use, just for fun
>>> 
>>> g.check_with_freevars('and (and def(x) constant(x)) AX EU !def(x) (and !def(x) use(x))')
set([1])


################################
# constant propagation, backwards
# returns a list of nodes that use a variable, which can be replaced with a constant
# pb: does not tell which constant

# and (and <-EX true (and !def(x) use(x))) <-AX <-EU !use(x) (and def(x) constant(x))

>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(2,2)
>>> g.add_edge(2,3)
>>> g.add_edge(3,4)
>>> g.add_predicate(1, 'def(eax)')
>>> g.add_predicate(1, 'constant(eax)')
>>> g.add_predicate(2, 'use(ebx)')
>>> g.add_predicate(3, 'use(eax)') # here, eax can be replaced by the constant
>>> g.add_predicate(4, 'def(eax)')
>>> g.add_predicate(4, 'use(eax)')
>>> g.add_predicate(5, 'use(eax)') # this is a non-connected node with an exclusive use, just for fun
>>> g.check_with_freevars('and (and !def(x) use(x)) <-AX <-EU !use(x) (and def(x) constant(x))')
set([3, 5])

# you were expecting [3] ?
# it returns every node for which the predecessors satisfy the formula
# and the nodes which have no predecessors, so this is normal

>>> g.add_edge(5,5)
>>> g.check_with_freevars('and (and !def(x) use(x)) <-AX <-EU !use(x) (and def(x) constant(x))')
set([3])

# 5 is no longer here because it now has a predecessor, and it doen't satisfy the property

# solution: check the existence of a successor or a predecessor:
>>> g.remove_edge(5,5)
>>> g.check('EX true')
set([1, 2, 3])
>>> g.check('<-EX true')
set([2, 3, 4])

# we can now check the correct formula:
>>> g.check_with_freevars('and (and <-EX true (and !def(x) use(x))) <-AX <-EU !use(x) (and def(x) constant(x))')
set([3])


################################
# initialized variables
# this a variation of constant propagation, it returns the list of nodes which use a variable that has not been def'ed yet
# (along at least one path)

# and (and use(x) !def(x)) !<-EF def(x)
# alternative:
# and (and use(x) !def(x)) <-EG !def(x)

g = PredicatedGraph()
g.add_edge(1,2)
g.add_edge(2,2)
g.add_edge(2,3)
g.add_edge(3,4)
g.add_predicate(1, 'def(eax)')
g.add_predicate(1, 'constant(eax)')
g.add_predicate(2, 'use(ebx)')
g.add_predicate(3, 'use(eax)') # here, eax can be replaced by the constant
g.add_predicate(4, 'def(eax)')
g.add_predicate(4, 'use(eax)')
g.add_predicate(5, 'use(eax)') # this is a non-connected node with an exclusive use, just for fun

# subtle: '!<-EF pouet' means 'there is a path that does not lead to pouet'
# it should not be mistaken with '<-EF !pouet'
>>> g.check_with_freevars('and (and use(x) !def(x)) !<-EF def(x)')
set([2, 5])

>>> g.check_with_freevars('and (and use(x) !def(x)) <-EG !def(x)')
set([2, 5])


#################################
# reachability
# returns nodes that are not reachable from the entrypoint and nodes that 
# do not lead to the exit
# this is purely from a graph reachibility point of view, conditional jumps are not supported

# !<-EF entrypoint
# !EF exit

>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(3,2) # 3 won't be reachable
>>> g.add_edge(2,4)
>>> g.add_edge(4,2) # a loop, for the fun
>>> g.add_edge(4,5)
>>> g.add_edge(5,6)
>>> g.add_edge(5,7) # a double branch, also for the fun
>>> g.add_edge(6,8)
>>> g.add_edge(7,8)
>>> g.add_edge(6,9) # a dead end
>>> g.add_node(42) # disconnected
>>> 
>>> g.add_predicate(1, 'entrypoint')
>>> g.add_predicate(1, 'def(eax)')
>>> g.add_predicate(2, 'def(ebx)')
>>> g.add_predicate(3, 'use(ebx)') # this use is unreachable
>>> g.add_predicate(4, 'use(pouet)')
>>> g.add_predicate(5, 'def(eax)') # eax overwrite after the loop
>>> g.add_predicate(6, 'def(ebx)') # ebx overwrite in each branch
>>> g.add_predicate(7, 'def(ebx)') # ebx overwrite in each branch
>>> g.add_predicate(8, 'use(ebx)') # make the second defs live
>>> g.add_predicate(8, 'use(eax)') # make the second defs live
>>> g.add_predicate(8, 'exit')
>>> 
>>> g.check_with_freevars('!<-EF entrypoint')
set([42, 3])

>>> g.check_with_freevars('!EF exit')
set([9, 42])


#################################
# behavior specification ?
# 
# will never be supported: 
# - fake conditional jumps (need constraint solving for that)
# - operation folding (need instruction semantics, arithmetic rewrite rules)

# Klez specification based on Kinder et al., DIMVA 2005
# and GetModuleFileNameA(_, x, null) (EU !def(x) CopyFileA(x))

# a program that behaves like Klez:
>>> g = PredicatedGraph()
>>> g.add_edge(1,2)
>>> g.add_edge(1,3)
>>> g.add_edge(3,4)
>>> g.add_edge(4,4)
>>> g.add_edge(3,5)
>>> g.add_edge(5,4)
>>> g.add_edge(5,6)
>>> g.add_predicate(1, 'entrypoint')
>>> g.add_predicate(2, 'CreateFile(pouet)')
>>> g.add_predicate(3, 'GetModuleFileNameA(handle, pFile, null)')
>>> g.add_predicate(4, 'def(handle)')
>>> g.add_predicate(5, 'use(pFile)')
>>> g.add_predicate(6, 'CopyFileA(pFile)')

>>> g.check_with_freevars('and GetModuleFileNameA(_, x, null) (EU !def(x) CopyFileA(x))')
set([3])

# if the program no longer behaves like Klez, for instance if it changes pFile between the two syscalls:
>>> g.add_predicate(5, 'def(pFile)')
>>> g.check_with_freevars('and GetModuleFileNameA(_, x, null) (EU !def(x) CopyFileA(x))')
set([])

# it is now possible to build a list of specifications:
>>> g.predicates[5] = [] # we restore the klez behavior
>>> klez = 'and GetModuleFileNameA(_, x, null) (EU !def(x) CopyFileA(x))'
>>> signatures = {'klez': klez, 'malware1': CTL('something'), 'malware2': CTL('somethingelse')}
>>> for s in signatures.keys():
...   if g.check_with_freevars(signatures[s]):
...     print '%s detected!' % s
... 
klez detected!


